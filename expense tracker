Creating a full MERN (MongoDB, Express.js, React, Node.js) stack application to log, categorize, and track expenses, including user authentication, CRUD operations for expenses, and filtering by date and category, requires both frontend and backend development. Below is an outline of both sections of the application, broken into backend and frontend code.

### Backend (Node.js/Express + MongoDB)

#### 1. Setup MongoDB with Mongoose for expense data and user authentication.

First, ensure you have Node.js installed. Then, create a new Node.js project and install the required dependencies.

```bash
mkdir expense-tracker
cd expense-tracker
npm init -y
npm install express mongoose bcryptjs jsonwebtoken cors dotenv
npm install --save-dev nodemon
```

**Create a `.env` file for environment variables:**

```plaintext
MONGO_URI=mongodb://localhost:27017/expense-tracker
JWT_SECRET=your_jwt_secret
PORT=5000
```

**Create the backend directory structure:**

```plaintext
expense-tracker/
├── backend/
│   ├── models/
│   │   ├── Expense.js
│   │   └── User.js
│   ├── routes/
│   │   ├── expenseRoutes.js
│   │   └── userRoutes.js
│   ├── controllers/
│   │   ├── expenseController.js
│   │   └── userController.js
│   └── server.js
├── .env
└── package.json
```

#### 2. **Model Definitions (Mongoose)**

##### `models/User.js` - User Model for Authentication

```javascript
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
});

// Hash password before saving
UserSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  this.password = await bcrypt.hash(this.password, 10);
});

UserSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

module.exports = mongoose.model('User', UserSchema);
```

##### `models/Expense.js` - Expense Model

```javascript
const mongoose = require('mongoose');

const ExpenseSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  category: { type: String, required: true },
  description: { type: String },
  date: { type: Date, required: true },
});

module.exports = mongoose.model('Expense', ExpenseSchema);
```

#### 3. **Controller Logic**

##### `controllers/userController.js` - User Authentication Controller

```javascript
const User = require('../models/User');
const jwt = require('jsonwebtoken');

// Register User
exports.registerUser = async (req, res) => {
  const { username, email, password } = req.body;
  
  try {
    const userExists = await User.findOne({ email });
    if (userExists) return res.status(400).json({ message: 'User already exists' });

    const user = new User({ username, email, password });
    await user.save();
    
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '30d' });
    res.status(201).json({ message: 'User registered', token });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

// Login User
exports.loginUser = async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'User not found' });

    const isMatch = await user.matchPassword(password);
    if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '30d' });
    res.json({ message: 'Login successful', token });
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};
```

##### `controllers/expenseController.js` - Expense Management Controller

```javascript
const Expense = require('../models/Expense');

// Create Expense
exports.createExpense = async (req, res) => {
  const { amount, category, description, date } = req.body;
  
  try {
    const expense = new Expense({
      user: req.user.id,
      amount,
      category,
      description,
      date
    });
    await expense.save();
    res.status(201).json(expense);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

// Get All Expenses
exports.getExpenses = async (req, res) => {
  try {
    const expenses = await Expense.find({ user: req.user.id }).sort({ date: -1 });
    res.json(expenses);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};

// Filter Expenses by Category and Date Range
exports.getFilteredExpenses = async (req, res) => {
  const { category, startDate, endDate } = req.query;
  const query = { user: req.user.id };

  if (category) query.category = category;
  if (startDate && endDate) query.date = { $gte: new Date(startDate), $lte: new Date(endDate) };

  try {
    const expenses = await Expense.find(query).sort({ date: -1 });
    res.json(expenses);
  } catch (error) {
    res.status(500).json({ message: 'Server error' });
  }
};
```

#### 4. **Routes**

##### `routes/userRoutes.js` - User Authentication Routes

```javascript
const express = require('express');
const { registerUser, loginUser } = require('../controllers/userController');

const router = express.Router();

router.post('/register', registerUser);
router.post('/login', loginUser);

module.exports = router;
```

##### `routes/expenseRoutes.js` - Expense Routes

```javascript
const express = require('express');
const { createExpense, getExpenses, getFilteredExpenses } = require('../controllers/expenseController');
const protect = require('../middleware/authMiddleware');

const router = express.Router();

router.post('/', protect, createExpense);
router.get('/', protect, getExpenses);
router.get('/filter', protect, getFilteredExpenses);

module.exports = router;
```

#### 5. **Authentication Middleware**

Create a `middleware/authMiddleware.js` file for JWT verification:

```javascript
const jwt = require('jsonwebtoken');
const User = require('../models/User');

const protect = async (req, res, next) => {
  const token = req.header('Authorization') && req.header('Authorization').split(' ')[1];

  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = await User.findById(decoded.id).select('-password');
    next();
  } catch (error) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

module.exports = protect;
```

#### 6. **Server Setup**

Create the `server.js` file to run the backend.

```javascript
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const userRoutes = require('./routes/userRoutes');
const expenseRoutes = require('./routes/expenseRoutes');

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch((err) => console.log(err));

app.use('/api/users', userRoutes);
app.use('/api/expenses', expenseRoutes);

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
```

#### Frontend (React)

##### 1. Set up React project

```bash
npx create-react-app frontend
cd frontend
npm install axios react-router-dom
```

##### 2. Create the basic directory structure

```plaintext
frontend/
├── src/
│   ├── components/
│   │   ├── Login.js
│   │   ├── Register.js
│   │   ├── ExpenseForm.js
│   │   ├── ExpenseList.js
│   │   └── FilterExpenses.js
│   ├── context/
│   │   └── AuthContext.js
│   ├── App.js
│   ├── index.js
```

##### 3. **Context for Authentication (AuthContext.js)**

```javascript
import React, { createContext, useState, useContext } from 'react';
import axios from 'axios';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem('token'));

  const login = async (email, password) => {
    try {
      const { data } = await axios.post('http://localhost:5000/api/users/login', { email, password });
      setUser(data.user);
      setToken(data.token);
      localStorage.setItem('token', data.token);
    } catch (error) {
      console.error('Login failed', error);
    }
  };

  const logout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('token');
  };

  return (
    <AuthContext.Provider value={{ user, token, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);
```

##### 4. **Login Component (Login.js)**

```javascript
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const { login } = useAuth();

  const handleSubmit = (e) => {
    e.preventDefault();
    login(email, password);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="email"
        placeholder="Email"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
        required
      />
      <input
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
        required
      />
      <button type="submit">Login</button>
    </form>
  );
};

export default Login;
```

##### 5. **ExpenseForm Component (ExpenseForm.js)**

```javascript
import React, { useState } from 'react';
import axios from 'axios';
import { useAuth } from '../context/AuthContext';

const ExpenseForm = () => {
  const { token } = useAuth();
  const [amount, setAmount] = useState('');
  const [category, setCategory] = useState('');
  const [description, setDescription] = useState('');
  const [date, setDate] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('http://localhost:5000/api/expenses', {
        amount,
        category,
        description,
        date,
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
    } catch (error) {
      console.error('Failed to add expense', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="number"
        placeholder="Amount"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        required
      />
      <input
        type="text"
        placeholder="Category"
        value={category}
        onChange={(e) => setCategory(e.target.value)}
        required
      />
      <input
        type="text"
        placeholder="Description"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
      />
      <input
        type="date"
        placeholder="Date"
        value={date}
        onChange={(e) => setDate(e.target.value)}
        required
      />
      <button type="submit">Add Expense</button>
    </form>
  );
};

export default ExpenseForm;
```

### Conclusion

This is a basic implementation of a MERN stack expense tracker. You'll need to create other components like `ExpenseList`, `FilterExpenses`, etc., and ensure routes and states are managed in React (via context). Additionally, consider implementing features like form validation, styling, and error handling to improve the app.